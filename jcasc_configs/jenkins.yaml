# vim: ts=2 sts=2 sw=2 et
jenkins:
  # Don't run jobs on master. Move everything to agents.
  numExecutors: 0
  mode: EXCLUSIVE
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  globalNodeProperties:
    - envVars:
        env:
          - key: PIP_DOWNLOAD_CACHE
            value: /var/cache/jenkins/pip

  remotingSecurity:
    enabled: true

  clouds:
    - docker:
        name: "Host docker"
        containerCap: 10
        dockerApi:
          dockerHost:
            credentialsId: "DOCKER_CREDENTAILS"
            # Credentials are ignored on a unix socket.
            uri: "${DOCKER_URI:-unix:///var/run/docker.sock}"
        templates:
          - labelString: "jenkins-job"
            name: "jenkins-job"
            instanceCapStr: "0"
            dockerTemplateBase:
              image: "docker.sunet.se/sunet/docker-jenkins-job"
              # This is the magic startup command who maps "localhost" to
              # the docker host machine to have docker run -p xx:yy work
              # from inside containers.
              dockerCommand: "/run.sh"
              # and that run.sh needs a tty to not exit.
              tty: true
              # Volumes to run docker-in-docker
              # and to cache pip downloads
              mounts:
                - "/usr/bin/docker:/usr/bin/docker:ro"
                - "/var/run/docker.sock:/var/run/docker.sock"
                - "pip_download_cache:/var/cache/jenkins/pip:rw"
            remoteFs: "/home/jenkins/"
            connector:
              attach:
                user: ""
            # pullStrategy variable in jcasc
            # Default to "PROD" value PULL_ALWAYS
            pullStrategy: "${pullStrategy:-PULL_ALWAYS}"


unclassified:
  gitSCM:
    createAccountBasedOnEmail: false
    globalConfigEmail: "dev@sunet.se"
    globalConfigName: "jenkins"
  sshPublisher:
    commonConfig:
      disableAllExec: false
# Not supported yet.
# We're doing this in groovy instead.
#    hostConfigurations:
#      - BapSshHostConfiguration:
#          name: pypi.sunet.se
#          hostname: pypi.sunet.se
#          username: pypi
#          remoteRootDir: /home/pypi/packages/

tool:
  git:
    installations:
      - name: Default
        home: git


# Not supported.
# We're doing this in groovy instead.
#locale:
#  systemLocale: en_US
#  ignoreAcceptLanguage: true


# We need to disable jobdsl security due to our Yaml library used in jobdsl.
security:
  GlobalJobDslSecurityConfiguration:
    useScriptSecurity: false
# Not supported.
# We're doing this in groovy instead.
#  updateSiteWarningsConfiguration:
#    ignoredWarnings:
#      - 'SECURITY-248'
# Approve these signatures to let our groovy code run them, while still in sandbox
  scriptApproval:
    approvedSignatures:
      - "method hudson.EnvVars expand java.lang.String"
      - "method org.jenkinsci.plugins.workflow.support.actions.EnvironmentAction getEnvironment"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toBoolean java.lang.Boolean"


credentials:
  system:
    domainCredentials:
      - credentials:
        - string:
            description: "Token to send notifications to Sunet Slack"
            id: 'SLACK_TOKEN'
            scope: 'GLOBAL'
            secret: '${SLACK_TOKEN}'
        - x509ClientCert:
            id: "DOCKER_CREDENTAILS"
            description: "Credentials to access our docker host"
            scope: 'GLOBAL'
            serverCaCertificate: '${DOCKER_SERVER_CA_CERTIFICATE}'
            clientCertificate: '${DOCKER_CLIENT_CERTIFICATE}'
            clientKeySecret: '${DOCKER_CLIENT_KEY}'
# Doesn't work because GNUPG_KEYRING is binary,
# and we can't pass binary via yaml, it needs to be base64
# so we create this file in groovy instead.
#        - file:
#            id: "GNUPG_KEYRING"
#            description: "Our default GNUPG pubring.kbx, used for initial trust"
#            scope: 'GLOBAL'
#            fileName: "pubring.kbx"
#            #file: isn't supported
#            # secretBytes needs base64 encoded data, not binary data as we got here.
#            #secretBytes: '${GNUPG_KEYRING}'
        - string:
            description: "Github access token"
            id: "GITHUB_TOKEN"
            secret: "${GITHUB_TOKEN}"


unclassified:
  globalConfigFiles:
    configs:
      - script:
          id: GPG_WRAPPER
          name: gpg-wrapper
          comment: "Our gpg-wrapper to use a gpg keyring provisioned by jenkins into variable GNUPG_KEYRING"
          content: |
              #!/bin/bash
              exec gpg --no-options --no-default-keyring --trustdb-name "$(tempfile)" --keyring "$GNUPG_KEYRING" "$@"


jobs:
  - script: >
      job('bootstrap-docker-builds') {
          /* OK, use this when we're rid of the needed yaml library,
          and can start to run job-dsl in sandbox
          properties {
              authorizeProjectProperty {
                  strategy {
                      specificUsersAuthorizationStrategy {
                          userid('admin')
                          useApitoken(false)
                          apitoken('')
                          password('')
                      }
                  }
              }
          }
          */
          logRotator {
              numToKeep(15)
          }
          triggers {
              // put the job on a cron to run in 1 minute after the rest of the casc configuration finishes loading
              // This is to workaround the fact that queue() doesn't work here, because the queue haven't inited yet.
              def currentDate = new Date()
              currentDate.set(minute: currentDate.minutes + 1)
              def delay = currentDate
              def cron_1_minute = '' + delay.getMinutes() + ' ' + delay.getHours() + ' ' + delay[Calendar.DAY_OF_MONTH] + ' ' + (delay.getMonth()+1) + ' *'
              // And after that, run it every 15 minutes to pick up any changes in any github repo
              cron(cron_1_minute + '\n' + 'H/15  * * * *')
          }
          wrappers {
              // DEV_MODE is expanded by jcasc
              if (${DEV_MODE:-false}) {
                  environmentVariables {
                      env('DEV_MODE', '${DEV_MODE}')
                      env('REPOS', '''${REPOS}''')
                      env('ORGS', '''${ORGS}''')
                  }
              }
              credentialsBinding {
                  string {
                      variable('GITHUB_TOKEN')
                      credentialsId('GITHUB_TOKEN')
                  }
                  // Provision our keyring to validate against as a file on the agent
                  file('GNUPG_KEYRING', 'GNUPG_KEYRING')
              }
              configFiles {
                  // And provision our gpg-wrapper to use the keyring GNUPG_KEYRING
                  custom('GPG_WRAPPER') {
                      variable('GPG_WRAPPER')
                  }
              }
          }
          scm {
              git {
                  remote {
                      // DEV_MODE is expanded by jcasc
                      if (${DEV_MODE:-false}) {
                          // Rely on run.sh localhost mapping, to exposed gitd
                          url('git://localhost/bootstrap-docker-builds')
                      } else {
                          // When we detect prod, use github directly
                          github('sunet/bootstrap-docker-builds')
                      }
                  }
                  branch("master")
              }
          }
          steps {
              // Only run code which we can validate
              shell('chmod +x "$GPG_WRAPPER" && git -c "gpg.program=$GPG_WRAPPER" verify-commit HEAD')
              jobDsl {
                  targets('github_docker_repos.groovy')
                  additionalClasspath('lib/*.jar')
                  sandbox(true)
                  ignoreExisting(false)
                  removedJobAction('DELETE')
                  removedViewAction('DELETE')
                  removedConfigFilesAction('DELETE')
                  lookupStrategy("SEED_JOB")
                  failOnMissingPlugin(true)
                  unstableOnDeprecation(true)
                  failOnSeedCollision(true)
              }
          }
          // DEV_MODE is expanded by jcasc
          if (!${DEV_MODE:-false}) {
              // Only send slack notifications in prod mode.
              publishers {
                  slackNotifier {
                      teamDomain('SUNET')
                      tokenCredentialId('SLACK_TOKEN')
                      room('devops-builds')
                      notifyAborted(true)
                      notifyFailure(true)
                      notifyNotBuilt(true)
                      notifyUnstable(true)
                      notifyBackToNormal(true)
                      notifySuccess(false)
                      notifyRepeatedFailure(true)
                      startNotification(false)
                      includeTestSummary(false)
                      includeCustomMessage(false)
                      commitInfoChoice('NONE')
                  }
              }
          }
      }
# Nope, worked around with cron() instead.
#  - script: queue('bootstrap-docker-builds')
